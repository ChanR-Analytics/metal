import unittest

import numpy as np

from metal.tuner import ModelTuner, HyperbandTuner

class TunerTest(unittest.TestCase):

    def test_config_constant(self):
        search_space = {'a': 1}
        tuner = ModelTuner(None, None, 123)
        configs = list(tuner.config_generator(search_space, max_search=10))
        self.assertEqual(len(configs), 1)

    def test_config_list(self):
        search_space = {'a': [1, 2]}
        tuner = ModelTuner(None, None, 123)
        configs = list(tuner.config_generator(search_space, max_search=10))
        self.assertEqual(len(configs), 2)

    def test_config_two_values(self):
        search_space = {'a': [1],
                        'b': [1, 2, 3]}
        tuner = ModelTuner(None, None, 123)
        configs = list(tuner.config_generator(search_space, max_search=10))
        self.assertEqual(len(configs), 3)

    def test_config_range(self):
        search_space = {'a': [1],
                        'b': [1, 2, 3],
                        'c': {'range': [1, 10]}}
        tuner = ModelTuner(None, None, 123)                        
        configs = list(tuner.config_generator(search_space, max_search=10))
        self.assertEqual(len(configs), 10)

    def test_config_unbounded_max_search(self):
        search_space = {'a': [1],
                        'b': [1, 2, 3],
                        'c': {'range': [1, 10]}}
        tuner = ModelTuner(None, None, 123)                        
        configs = list(tuner.config_generator(search_space, max_search=0))
        self.assertEqual(len(configs), 3)

    def test_config_log_range(self):
        search_space = {'a': [1],
                        'b': [1, 2, 3],
                        'c': {'range': [1, 10]},
                        'd': {'range': [1, 10], 'scale': 'log'}}
        tuner = ModelTuner(None, None, 123)                        
        configs = list(tuner.config_generator(search_space, max_search=20))
        self.assertEqual(len(configs), 20)
        self.assertGreater(
            np.mean([c['c'] for c in configs]), 
            np.mean([c['d'] for c in configs]))

class HyperbandTunerTest(unittest.TestCase):
    
    def test_hyperband_schedule_correctness(self):
        # Test the default schedule that is generated by the hyperband tuner
        # (which at the moment is budget=200, eta=3)
        hyperband_tuner = HyperbandTuner(None,
                                         hyperband_epochs_budget=200, 
                                         hyperband_proportion_discard=3, 
                                         seed=123)
        expected_schedule = [
            [(9, 2), (3, 8), (1, 26)], 
            [(3, 8), (1, 26)], 
            [(3, 26)]
        ]
        
        self.assertEqual(hyperband_tuner.hyperband_schedule, 
                         expected_schedule)

    def test_hyperband_paper_schedule_correctness(self):
        # Generate the schedule in the hyperband paper
        # (https://arxiv.org/pdf/1603.06560.pdf)
        hyperband_tuner = HyperbandTuner(None,
                                         hyperband_epochs_budget=1701, 
                                         hyperband_proportion_discard=3, 
                                         seed=123)

        # This should generate the exact schedule in the paper.
        expected_schedule = [
            [(81, 1), (27, 3), (9, 9), (3, 27), (1, 81)],
            [(27, 3), (9, 9), (3, 27), (1, 81)], 
            [(9, 9), (3, 27), (1, 81)], 
            [(6, 27), (2, 81)], [(5, 81)]
        ]

        self.assertEqual(hyperband_tuner.hyperband_schedule, 
                         expected_schedule)
                    

if __name__ == '__main__':
    unittest.main()
